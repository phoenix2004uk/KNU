{LOCAL Z IS List(0,1,3,4).LOCAL Y IS{PARAMETER A,B,D,F,H.A[5][D](F,H).A[4]:REMOVE(B).A[5]:REMOVE(B).}.LOCAL X IS{PARAMETER A,B.IF NOT EXISTS(A[6])RETURN 0.LOCAL D IS READJSON(A[6]).LOCAL F IS Z:ITERATOR. UNTIL NOT F:NEXT SET A[F:VALUE]TO D[F:INDEX]. RETURN 1.}.LOCAL W IS{PARAMETER A,B.LOCAL D IS List().LOCAL F IS Z:ITERATOR. UNTIL NOT F:NEXT D:ADD(A[F:VALUE]).WRITEJSON(D,A[6]).}.LOCAL U IS{PARAMETER A,B.IF NOT EXISTS(A)RETURN 0.LOCAL D IS READJSON(A).FOR F IN D SET B[F]TO D[F].}.LOCAL T IS{PARAMETER A,B.WRITEJSON(B,A).}.LOCAL S IS List({PARAMETER A,B,D.IF NOT A[5]:HASKEY(D)RETURN 0.LOCAL F IS D+TIME:SECONDS.A[4]:ADD(F).SET A[5][F]TO Y:bind(A,F,D).},{PARAMETER A,B,D,F IS "".IF F<>"" SET A[1]TO MAX(0,A[0]+F).SET A[0]TO MAX(0,A[0]+D).W(A,B).},{PARAMETER A,B.IF A[1]<>""{SET A[0]TO A[1].SET A[1]TO "".}ELSE SET A[0]TO A[0]+1.W(A,B).},{PARAMETER A,B,D.IF NOT A[2]:HASKEY(D)RETURN 0.A[3]:ADD(D).W(A,B).RETURN 1.},{PARAMETER A,B,D.IF NOT A[2]:HASKEY(D)RETURN 0.LOCAL F IS List().LOCAL H IS 0.UNTIL H=MIN(A[0]+1,A[3]:LENGTH){F:ADD(A[3][H]).SET H TO H+1.}F:ADD(D).UNTIL H=A[3]:LENGTH{F:ADD(A[3][H]).SET H TO H+1.}SET A[3]TO F.W(A,B).RETURN 1.},{PARAMETER A,B,D.A[4]:REMOVE(D).W(A,B).},{PARAMETER A,B,D.IF NOT A[5]:HASKEY(D)RETURN 0.A[4]:ADD(D).W(A,B).RETURN 1.},{PARAMETER A,B.SET A[0]TO A[3]:LENGTH. N(A,B).}).LOCAL P IS{PARAMETER A,B,D.IF A[0]<A[3]:LENGTH{A[2][A[3][A[0]]](D,B).LOCAL F IS A[4]:COPY:ITERATOR. UNTIL NOT F:NEXT A[5][F:VALUE](D,B).WAIT 0.RETURN 0.}N(A,B).RETURN 1.}.LOCAL N IS{PARAMETER A,B.DELETEPATH(A[6]).DELETEPATH(A[7]).}.export(Lex("version","1.2.0","new",{PARAMETER A,B IS Lex(),D IS 1,F IS Lex(),H IS 1.LOCAL J IS Lex().LOCAL K IS Lex().SET K[8]TO A. SET K[0]TO 0.SET K[1]TO "".SET K[6]TO "/etc/runmode."+A. SET K[7]TO "/etc/state."+A. IF NOT B:ISTYPE("Lexicon")RETURN 0.IF NOT (D:ISTYPE("List")OR D:ISTYPE("Scalar"))RETURN 0.IF NOT F:ISTYPE("Lexicon")RETURN 0.IF NOT (H:ISTYPE("List")OR H:ISTYPE("Scalar"))RETURN 0.SET K[2]TO B. IF D:ISTYPE("Scalar")AND D=1 SET K[3]TO B:KEYS. ELSE{SET K[3]TO List().IF D:ISTYPE("List")FOR L IN D{IF NOT B:HASKEY(L)RETURN 0.K[3]:ADD(L).}}SET K[5]TO F. SET K[4]TO UNIQUESET().FOR L IN F:KEYS IF(H:ISTYPE("Scalar")AND H=1)OR(H:ISTYPE("List")AND H:CONTAINS(L))K[4]:ADD(L).LOCAL M IS Lex().SET M["next"]TO S[2]:bind(K,J).SET M["jump"]TO S[1]:bind(K,J).SET M["add"]TO S[3]:bind(K,J).SET M["insert"]TO S[4]:bind(K,J).SET M["enable"]TO S[6]:bind(K,J).SET M["disable"]TO S[5]:bind(K,J).SET M["trigger"]TO S[0]:bind(K,J).SET M["end"]TO S[7]:bind(K,J).SET M["save"]TO T:bind(K[7]).SET M["load"]TO U:bind(K[7]).IF NOT X(K,J)W(K,J).RETURN P:bind(K,J,M).})).}