{LOCAL Z IS STACK().LOCAL Y IS Lex().GLOBAL import IS{PARAMETER A.IF Y:HASKEY(A)RETURN Y[A].IF NOT EXISTS("/lib/"+A){LOCAL B IS GetLatestVersion(A,"/knulib").IF NOT(B AND GetKSCFile(B,"/lib/"+A))KnuPanic(A,"import").}RUNPATH("/lib/"+A).LOCAL D IS Z:POP. SET Y[A]TO D. RETURN D.}.GLOBAL export IS{PARAMETER A.Z:PUSH(A).}.GLOBAL purge IS{PARAMETER A.using(A,{PARAMETER B.DELETEPATH("/lib/"+B).Y:REMOVE(B).}).}.}FUNCTION using{PARAMETER A,B.IF A:ISTYPE("Enumerable")FOR D IN A B(D).ELSE B(A).}FUNCTION download{PARAMETER A,B,D IS A,F IS 1.IF F UNTIL HasKSCConnection()WAIT 1.RETURN GetKSCFile(B+"/"+A,"/home/"+D,1).}FUNCTION Read{PARAMETER A.IF EXISTS(A)RETURN OPEN(A):READALL:STRING. RETURN 0.}FUNCTION Write{PARAMETER A,B.IF NOT EXISTS(A)CREATE(A).OPEN(A):WRITE(B:TOSTRING).}FUNCTION GetCallsign{RETURN Read("/etc/callsign").}FUNCTION GetShipClass{RETURN Read("/etc/class").}FUNCTION GetMissionTag{RETURN Read("/etc/mission").}FUNCTION Notify{PARAMETER A,B IS FALSE. HUDTEXT(A,5,4,20,BLUE,B).}IF STATUS="PRELAUNCH"{import("core/init").purge("core/init").}UNTIL 0{IF EXISTS("1:/mission/main.ks"){GLOBAL MissionRunner IS import("mission_runner").SET steps TO Lex().SET sequence TO 1.SET events TO Lex().SET active TO 1.{RUNPATH("1:/mission/main.ks").}LOCAL A IS MissionRunner["new"]("0",steps,sequence,events,active).UNTIL 0 IF A()BREAK. DELETEPATH("1:/mission").Notify("Checking for new instructions",TRUE).}WAIT 60.IF HasKSCConnection(){import("core/update").purge("core/update").IF EXISTS("1:/mission/main.ks"){DELETEPATH("1:/lib").REBOOT.}}}